Console.WriteLine("Hello . Welcome");
for (bool repeat = true; repeat == true;)
{
    Console.WriteLine("Choose from these options \n 1 = '4 numbers and 1 basic operator'" +
        " \n 2 = 'many numbers and many basic operator'" +
        " \n 3 = '3 numbers and power and root operators'");
    var input = Console.ReadKey();
    Console.WriteLine();
    if (input.Key is ConsoleKey.D1 or ConsoleKey.NumPad1)
    {
        OneOperator();
    }
    else if (input.Key is ConsoleKey.D2 or ConsoleKey.NumPad2)
    {
        MoreOperators();
    }
    else if (input.Key is ConsoleKey.D3 or ConsoleKey.NumPad3)
    {
        PowerAndRoot();
    }
    else Console.WriteLine("invalid input !");

    for (bool inputIsValid = false; inputIsValid != true;)
    {
        Console.WriteLine("\ndo you want to repeat ?" + "\n" + "'y/n'");
        var t = (Console.ReadKey());
        if (t.Key == ConsoleKey.Y)
        {
            Console.Clear();
            inputIsValid = true;
        }
        else if (t.Key == ConsoleKey.N)
        {
            repeat = false;
            inputIsValid = true;
        }
        else
        {
            Console.WriteLine("\n" + "invalid input ! try again");
        }
    }
}


static int[] GetNmbers(int lenght)
{
    int[] numbers = new int[lenght];
    for (int i = 0; i < lenght; i++)
    {
        Console.WriteLine($"Enter number {i + 1} of total {lenght}");
        int temporaryInputNumber = Convert.ToInt32(Console.ReadLine());
        numbers[i] = temporaryInputNumber;
    }
    return numbers;
}


static void OneOperator()
{
    int result = 0;
    Console.WriteLine("if you want to divide pls dont use 0 after the first number");
    int[] numbers = GetNmbers(4);
    ConsoleKeyInfo temporaryInputOperator = new ConsoleKeyInfo();
    Console.WriteLine("Enter operator ");
    temporaryInputOperator = Console.ReadKey();
    Console.WriteLine();
    if (temporaryInputOperator.Key is ConsoleKey.Add)
    {

        result = 0;
        foreach (int number in numbers)
            result += number;
    }
    else if (temporaryInputOperator.Key is ConsoleKey.Delete)
    {

        result = numbers[0];
        foreach (int number in numbers.Skip(1))
            result -= number;
    }
    else if (temporaryInputOperator.Key is ConsoleKey.Multiply)
    {

        result = 1;
        foreach (int number in numbers)
            result *= number;
    }
    else if (temporaryInputOperator.Key is ConsoleKey.Divide)
    {

        result = numbers[0];
        foreach (int number in numbers.Skip(1))
            result /= number;
    }
    else
    {
        Console.Write("Operator is invalid !");
        return;
    }

    Console.WriteLine($"{numbers[0]} {temporaryInputOperator.KeyChar}" +
    $" {numbers[1]} {temporaryInputOperator.KeyChar}" +
    $" {numbers[2]} {temporaryInputOperator.KeyChar}" +
    $" {numbers[3]} = {result}");

    return;
}

static void MoreOperators()
{
    Console.WriteLine("How many numbers ?" +
        " Warning! Number of operators is one less than numbers");
    int[] numbers = GetNmbers(Convert.ToInt32(Console.ReadLine()));
    int result = numbers[0];
    char[,] operators = new char[numbers.Length - 1, 2];
    for (int i = 0; i < operators.GetLength(0); i++)
    {
        Console.WriteLine($"\nEnter {i + 1} operator of total {numbers.Length-1}");
        char input = Convert.ToChar(Console.ReadLine());
        if (input == '*')
        {
            operators[i, 0] = '*';
            operators[i, 1] = '1';
        }
        else if (input == '/')
        {
            operators[i, 0] = '/';
            operators[i, 1] = '1';
        }
        else if (input == '+')
        {
            operators[i, 0] = '+';
            operators[i, 1] = '2';
        }
        else if (input == '-')
        {
            operators[i, 0] = '-';
            operators[i, 1] = '2';
        }

    }
    for (int i = 0; i < operators.GetLength(0) - 1; i++)
        for (int j = 0; j < operators.GetLength(0) - i - 1; j++)
            if (Convert.ToInt32(operators[j, 1]) > Convert.ToInt32(operators[j + 1, 1]))
            {
                char[] temp = { operators[j, 0], operators[j, 1] };
                operators[j, 0] = operators[j + 1, 0];
                operators[j, 1] = operators[j + 1, 1];
                operators[j + 1, 0] = temp[0];
                operators[j + 1, 1] = temp[1];
            }
    for (int i = 1; i < numbers.Length; i++)
    {
        Console.Write($"{numbers[i - 1]} {operators[i - 1, 0]} ");
        result = PerformCalculation(operators[i - 1, 0], result, numbers[i]);
        if (i == numbers.Length - 1)
        {
            Console.Write($"{numbers[i]} = {result} \n");
        }
    }
    return;
}


static int PerformCalculation(char oprt, int number1, int number2)
{
    if (oprt == '+')
    {
        return number1 + number2;
    }
    else if (oprt == '-')
    {
        return number1 - number2;
    }
    else if (oprt == '*')
    {
        return number1 * number2;
    }
    else if (oprt == '/')
    {
        return number1 / number2;
    }
    else
    {
        return number1;
    }
}


static void PowerAndRoot()
{
    Console.WriteLine("first number will be powerd by the second number and the third number will be Square Rooted");
    int[] numbers = GetNmbers(3);
    int power = numbers[0];
    for (int i = 1; i < numbers[1]; i++)
    {
        power *= numbers[0];
    }
    if (numbers[1] == 0) power = 1;
    double root = 1;
    int t = 0;
    while (true)
    {
        t = t + 1;
        root = (numbers[2] / root + root) / 2;
        if (t == numbers[2] + 1) { break; }
    }
    Console.WriteLine($"{numbers[0]} ^ {numbers[1]} = {power} \nthe Square Root of {numbers[2]} = {root}");
    return;
}