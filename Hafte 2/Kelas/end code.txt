Console.WriteLine("please enter interger array split by  \",\" :");
var input = Console.ReadLine();
string[] inputArray = input.Split(',');
for (int i = 0; i < inputArray.Length; i++)
{
    inputArray[i] = inputArray[i].Trim();
}
int[] inputNumber = new int[inputArray.Length];
for (int i = 0; i < inputArray.Length; i++)
{
    inputNumber[i] = Convert.ToInt32(inputArray[i]);
}
Console.WriteLine("please select method");
Console.WriteLine("1- search");
Console.WriteLine("2- searchIndex");
Console.WriteLine("3- Max");
Console.WriteLine("4- Min");
Console.WriteLine("5- Binary Search");
Console.WriteLine("6- Sort");
int methodType = Convert.ToInt32(Console.ReadLine());
int x = 0;
if (methodType == 1 || methodType == 2 || methodType == 5)
{
    Console.WriteLine("enter number to search :");
    x = Convert.ToInt32(Console.ReadLine());
}
switch (methodType)
{
    case 1:
        Console.WriteLine(search(inputNumber, x));
        break;
    case 2:
        var result1 = searchIndex(inputNumber, x);
        foreach (var item in result1)
        {
            if (item != 0)
                Console.Write(item + " - ");
        }
        break;
    case 3:
        Console.WriteLine(GetMax(inputNumber));
        break;
    case 4:
        Console.WriteLine(GetMin(inputNumber));
        break;
    case 5:
        InsertionSort(inputNumber);
        //Console.WriteLine(BinarySearch(inputNumber, 0, inputNumber.Length - 1, x));
        break;
    case 6:
        PrintArray(sort(inputNumber));
        break;
    default:
        break;
}
bool search(int[] arr, int x)
{
    foreach (var item in arr)
    {
        if (item == x)
            return true;
    }
    return false;
}
int[] searchIndex(int[] arr, int x)
{
    int[] result = new int[arr.Length];
    int j = 0;
    for (int i = 0; i < arr.Length; i++)
    {
        if (arr[i] == x)
        {
            result[j] = i + 1;
            j++;
        }
    }
    return result;
}
int GetMax(int[] arr)
{
    int result = arr[0];
    for (int i = 0; i < arr.Length; i++)
    {
        if (arr[i] > result)
            result = arr[i];
    }
    return (result);
}
int GetMin(int[] arr)
{
    int result = arr[0];
    for (int i = 0; i < arr.Length; i++)
    {
        if (arr[i] < result)
            result = arr[i];
    }
    return (result);
}
void PrintArray(int[] arr)
{
    foreach (var item in arr)
    {
        Console.Write($"{item} - ");
    }
}
int[] sort(int[] input)
{
    var arr = input.ToArray();
    int[] result = new int[arr.Length];
    for (int i = 0; i < arr.Length; i++)
    {
        int minIndex = MinIndex(arr);
        result[i] = arr[minIndex];
        arr[minIndex] = int.MaxValue;
    }
    return result;
}
static int BinSearch(int[] arr, int x, int low, int high)
{
    if (low > high)
        return -1;
    int mid = ((high - low) / 2) + low;
    if (arr[mid] == x)
        return mid;
    else if (arr[mid] < x)
        return BinSearch(arr, x, mid + 1, high);
    else if (arr[mid] > x)
        return BinSearch(arr, x, low, mid - 1);
    else
        return -1;
}
int MinIndex(int[] arr)
{
    int minIndex = 0;
    for (int i = 1; i < arr.Length; i++)
    {
        if (arr[i] < arr[minIndex])
            minIndex = i;
    }
    return minIndex;
}
void Swap(int[] arr, int a, int b)
{
    int t = arr[a];
    arr[a] = arr[b];
    arr[b] = t;
}
int[] InsertionSort(int[] arr)
{
    int[] temp = new int[arr.Length];
    temp[0] = arr[0];
    int count = 1;
    for (int i = 1; i < arr.Length; i++)
    {
        if (arr[i] >= temp[count - 1])
        {
            Insert(temp, count, arr[i], count);
            count++;
        }
        else
        {
            for (int j = count - 1; j >= 0; j--)
            {

                if (temp[j] <= arr[i])
                {
                    Insert(temp, j + 1, arr[i], count);
                    count++;
                    break;
                }
                if (j == 0)
                {
                    Insert(temp, j, arr[i], count);
                    count++;
                    break;
                }
            }
        }
    }
    PrintArray(temp);
    return temp;
}
void Insert(int[] arr, int index, int num, int count)
{
    for (int i = count-1; i >=index; i--)
    {
        arr[i + 1] = arr[i];
    }
    arr[index] = num;
}